[tox]
envlist =
    # <3.11: run all non-MPL tests
    py{37,38,39,310}-{local,integ,accept,examples},
    # >=3.11: run all tests with MPL installed and without MPL installed
    # The `-mpl` suffix tells tox to install the MPL.
    # In the case where the suffix IS NOT appended,
    #   this runs tests for the target version WITHOUT the MPL installed.
    # In the case where the suffix IS appended,
    #   this runs tests for the target version WITH the MPL installed.
    # This does not run any MPL-specific tests; it only runs non-MPL-specific
    #   tests in a test environment that also has the MPL.
    py{311,312}-{local,integ,accept,examples}{,-mpl},
    # >=3.11: Run ONLY the MPL-specific tests.
    # These must be separate from the above target, since
    # these require the `-mpl` suffix.
    # The `mpl` prefix specifies a separate target,
    # i.e. `mpllocal` instead of `local`.
    # `mplXXX` contains tests using MPL components.
    py{311,312}-mpl{local,examples,performancetests}-mpl
    nocmk,
    bandit, doc8, readme, docs,
    {flake8,pylint}{,-tests,-examples,-performancetests},
    isort-check, black-check,
    # prone to false positives
    vulture

# Additional test environments:
#
# vulture :: Runs vulture. Prone to false-positives.
# linters :: Runs all linters over all source code.
# linters-tests :: Runs all linters over all tests.
# linters-examples :: Runs all linters over all examples and examples tests.

# Autoformatter helper environments:
#
# autoformat : Apply all autoformatters
#
# black-check : Check for "black" issues
# blacken : Fix all "black" issues
#
# isort-seed : Generate a known_third_party list for isort.
#   NOTE: make the "known_third_party = " line in setup.cfg before running this
#   NOTE: currently it incorrectly identifies this library too; make sure you remove it
# isort-check : Check for isort issues
# isort : Fix isort issues

# Operational helper environments:
#
# docs :: Builds Sphinx documentation.
# serve-docs :: Starts local webserver to serve built documentation.
# build :: Builds source and wheel dist files.
# test-release :: Builds dist files and uploads to testpypi pypirc profile.
# release :: Builds dist files and uploads to pypi pypirc profile.

# Reporting environments:
#
# coverage :: Runs code coverage, failing the build if coverage is below the configured threshold

[testenv:base-command]
commands = pytest --basetemp={envtmpdir} -l {posargs}

[testenv]
passenv =
    # Identifies AWS KMS key id to use in integration tests
    AWS_ENCRYPTION_SDK_PYTHON_INTEGRATION_TEST_AWS_KMS_KEY_ID \
    # Identifies a second AWS KMS key id to use in integration tests
    AWS_ENCRYPTION_SDK_PYTHON_INTEGRATION_TEST_AWS_KMS_KEY_ID_2 \
    # Identifies AWS KMS MRK key id to use in integration tests
    AWS_ENCRYPTION_SDK_PYTHON_INTEGRATION_TEST_AWS_KMS_MRK_KEY_ID_1 \
    # Identifies a related AWS KMS MRK key id to use in integration tests
    AWS_ENCRYPTION_SDK_PYTHON_INTEGRATION_TEST_AWS_KMS_MRK_KEY_ID_2 \
    # Pass through AWS credentials
    AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \
    # AWS Role access in CodeBuild is via the contaner URI
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI \
    # Pass through AWS profile name (useful for local testing)
    AWS_PROFILE \
    # Pass through custom pip config file settings
    PIP_CONFIG_FILE
sitepackages = False
deps =
    -rdev_requirements/test-requirements.txt
    # Install the MPL requirements if the `-mpl` suffix is present
    mpl: -rrequirements_mpl.txt
commands =
    local: {[testenv:base-command]commands} test/ -m local --ignore test/mpl/
    # MPL unit tests require the MPL to be installed
    mpllocal: {[testenv:base-command]commands} test/ -m local
    integ: {[testenv:base-command]commands} test/ -m integ --ignore test/mpl/
    accept: {[testenv:base-command]commands} test/ -m accept --ignore test/mpl/
    examples: {[testenv:base-command]commands} examples/test/legacy/ -m examples
    # MPL keyring examples require a special IAM role; run these separately under a separate set of permissions
    mplexamples: {[testenv:base-command]commands} examples/test/ -m examples --ignore examples/test/legacy/
    performancetests: {[testenv:base-command]commands} performance_tests/test/ -m examples
    all: {[testenv:base-command]commands} test/ examples/test/legacy/ --ignore test/mpl/
    mplall: {[testenv:base-command]commands} test/ examples/test/
    manual: {[testenv:base-command]commands}

# Run code coverage on the unit tests
[testenv:coverage]
commands = {[testenv:base-command]commands} --cov aws_encryption_sdk test/ -m local --ignore test/mpl/
[testenv:mplcoverage-mpl]
commands = {[testenv:base-command]commands} --cov-config=.coveragercmpl --cov aws_encryption_sdk test/ -m local

# Verify that local tests work without environment variables present
[testenv:nocmk]
basepython = python3
sitepackages = False
#########################################################
# Do not pass through or set any environment variables! #
passenv =
setenv =
#########################################################
deps = -rdev_requirements/test-requirements.txt
commands = {[testenv:base-command]commands} test/ -m local --ignore test/mpl/

# Collect requirements for use in upstream tests
[testenv:freeze-upstream-requirements-base]
sitepackages = False
skip_install = True
recreate = True
deps =
commands = {toxinidir}/test/freeze-upstream-requirements.sh

# Freeze for Python 3.11
[testenv:freeze-upstream-requirements-py311]
basepython = python3.11
sitepackages = {[testenv:freeze-upstream-requirements-base]sitepackages}
skip_install = {[testenv:freeze-upstream-requirements-base]skip_install}
recreate = {[testenv:freeze-upstream-requirements-base]recreate}
deps = {[testenv:freeze-upstream-requirements-base]deps}
commands = {[testenv:freeze-upstream-requirements-base]commands} test/upstream-requirements-py311.txt

# Test frozen upstream requirements
[testenv:test-upstream-requirements-base]
sitepackages = False
recreate = True
commands = {[testenv:base-command]commands} test/ -m local --ignore test/mpl/

# Test frozen upstream requirements for Python 3.11
[testenv:test-upstream-requirements-py311]
basepython = python3.11
deps = -rtest/upstream-requirements-py311.txt
sitepackages = {[testenv:test-upstream-requirements-base]sitepackages}
recreate = {[testenv:test-upstream-requirements-base]recreate}
commands = {[testenv:test-upstream-requirements-base]commands}

# Linters
[testenv:flake8]
basepython = python3
deps = -rdev_requirements/linter-requirements.txt
commands =
    flake8 src/aws_encryption_sdk/ setup.py

[testenv:flake8-tests]
basepython = {[testenv:flake8]basepython}
deps = -rdev_requirements/linter-requirements.txt
commands =
    flake8 \
        # Ignore F811 redefinition errors in tests (breaks with pytest-mock use)
        # E203 is not PEP8 compliant https://github.com/ambv/black#slices
        # W503 is not PEP8 compliant https://github.com/ambv/black#line-breaks--binary-operators
        --ignore F811,E203,W503,D \
        test/

[testenv:flake8-examples]
basepython = {[testenv:flake8]basepython}
deps = {[testenv:flake8]deps}
commands =
    flake8 examples/src/
    flake8 \
        # Ingore D103 missing docstring errors in tests (test names should be self-documenting)
        # E203 is not PEP8 compliant https://github.com/ambv/black#slices
        # W503 is not PEP8 compliant https://github.com/ambv/black#line-breaks--binary-operators
        --ignore D103,E203,W503 \
        examples/test/

[testenv:flake8-performancetests]
basepython = {[testenv:flake8]basepython}
deps = {[testenv:flake8]deps}
commands =
    flake8 performance_tests/src/
    flake8 \
        # Ingore D103 missing docstring errors in tests (test names should be self-documenting)
        # E203 is not PEP8 compliant https://github.com/ambv/black#slices
        # W503 is not PEP8 compliant https://github.com/ambv/black#line-breaks--binary-operators
        --ignore D103,E203,W503 \
        performance_tests/test/

[testenv:pylint]
basepython = python3
deps =
    {[testenv]deps}
    -rdev_requirements/linter-requirements.txt
commands =
    pylint \
        --rcfile=src/pylintrc \
        --max-module-lines=1500 \
        src/aws_encryption_sdk/  \
        setup.py
        --ignore-paths=src/aws_encryption_sdk/internal/mpl/

[testenv:pylint-examples]
basepython = {[testenv:pylint]basepython}
deps = {[testenv:pylint]deps}
commands =
    pylint --rcfile=examples/src/pylintrc examples/src/
    pylint --rcfile=examples/test/pylintrc --disable R0801 examples/test/

[testenv:pylint-performancetests]
basepython = {[testenv:pylint]basepython}
deps = {[testenv:pylint]deps}
commands =
    pylint --rcfile=performance_tests/pylintrc performance_tests/src/
    pylint --rcfile=performance_tests/pylintrc --disable R0801 performance_tests/test/

[testenv:pylint-tests]
basepython = {[testenv:pylint]basepython}
deps = {[testenv:pylint]deps}
commands =
    pylint \
        --rcfile=test/pylintrc \
        test/unit/ \
        test/functional/ \
        test/integration/

[testenv:blacken-src]
basepython = python3
deps = -rdev_requirements/linter-requirements.txt
commands =
    black --line-length 120 \
        src/aws_encryption_sdk/ \
        setup.py \
        doc/conf.py \
        test/ \
        examples/ \
        performance_tests/ \
        {posargs}


[testenv:blacken]
basepython = python3
deps =
    {[testenv:blacken-src]deps}
commands =
    {[testenv:blacken-src]commands}

[testenv:black-check]
basepython = python3
deps =
    {[testenv:blacken]deps}
commands =
    {[testenv:blacken-src]commands} --diff

[testenv:isort-seed]
basepython = python3
deps = -rdev_requirements/linter-requirements.txt
commands = seed-isort-config

[testenv:isort]
basepython = python3
deps = -rdev_requirements/linter-requirements.txt
commands = isort -rc \
    src \
    test \
    # We do not include examples/test because of the need to modify sys.path for some imports
    examples/src/ \
    doc \
    setup.py \
    {posargs}

[testenv:isort-check]
basepython = python3
deps = {[testenv:isort]deps}
commands = {[testenv:isort]commands} -c

[testenv:autoformat]
basepython = python3
deps =
    {[testenv:blacken]deps}
    {[testenv:isort]deps}
commands =
    {[testenv:blacken]commands}
    {[testenv:isort]commands}

[testenv:doc8]
basepython = python3
deps =
    -rdev_requirements/linter-requirements.txt
    -rdev_requirements/doc-requirements.txt
commands = doc8 doc/index.rst README.rst CHANGELOG.rst

[testenv:readme]
basepython = python3
deps = -rdev_requirements/linter-requirements.txt
commands = python setup.py check -r -s

[testenv:bandit]
basepython = python3
deps = -rdev_requirements/linter-requirements.txt
commands = bandit -r src/aws_encryption_sdk/

# Prone to false positives: only run independently
[testenv:vulture]
basepython = python3
deps = -rdev_requirements/linter-requirements.txt
commands = vulture src/aws_encryption_sdk/

[testenv:linters]
basepython = python3
deps =
    {[testenv:flake8]deps}
    {[testenv:pylint]deps}
    {[testenv:doc8]deps}
    {[testenv:readme]deps}
    {[testenv:bandit]deps}
commands =
    {[testenv:flake8]commands}
    {[testenv:pylint]commands}
    {[testenv:doc8]commands}
    {[testenv:readme]commands}
    {[testenv:bandit]commands}

[testenv:linters-tests]
basepython = python3
deps =
    {[testenv:flake8-tests]deps}
    {[testenv:pylint-tests]deps}
commands =
    {[testenv:flake8-tests]commands}
    {[testenv:pylint-tests]commands}

[testenv:linters-examples]
basepython = python3
deps =
    {[testenv:flake8-examples]deps}
    {[testenv:pylint-examples]deps}
commands =
    {[testenv:flake8-examples]commands}
    {[testenv:pylint-examples]commands}

[testenv:linters-performance-tests]
basepython = python3
deps =
    {[testenv:flake8-performancetests]deps}
    {[testenv:pylint-performancetests]deps}
commands =
    {[testenv:flake8-performancetests]commands}
    {[testenv:pylint-performancetests]commands}

# Documentation
[testenv:docs]
basepython = python3
deps = -rdev_requirements/doc-requirements.txt
commands =
    sphinx-build -E -c doc/ -b html doc/ doc/build/html

[testenv:serve-docs]
basepython = python3
skip_install = true
changedir = doc/build/html
deps =
commands =
    python -m http.server {posargs}

# Release tooling
[testenv:park]
basepython = python3
skip_install = true
deps = -rdev_requirements/release-requirements.txt
commands = python setup.py park

[testenv:build]
basepython = python3
skip_install = true
deps = -rdev_requirements/release-requirements.txt
commands =
    python setup.py sdist bdist_wheel

[testenv:release-base]
basepython = python3
skip_install = true
deps = -rdev_requirements/release-requirements.txt
passenv =
    # Intentionally omit TWINE_REPOSITORY_URL from the passenv list,
    # as this overrides other ways of setting the repository and could
    # unexpectedly result in releasing to the wrong repo
    {[testenv]passenv} \
    TWINE_USERNAME \
    TWINE_PASSWORD
commands =
    {[testenv:build]commands}

[testenv:release-private]
basepython = python3
skip_install = true
deps = {[testenv:release-base]deps}
passenv =
    {[testenv:release-base]passenv} \
    TWINE_REPOSITORY_URL
setenv =
    # Explicitly set the URL as the env variable value, which will cause us to
    # throw an error if the variable is not set. Otherwise, omission of the
    # env variable could cause us to unintentionally upload to the wrong repo
    TWINE_REPOSITORY_URL = {env:TWINE_REPOSITORY_URL}
commands =
    {[testenv:release-base]commands}
    # Omitting an explicit repository will cause twine to use the repository
    # specified in the environment variable
    twine upload --skip-existing {toxinidir}/dist/*

[testenv:test-release]
basepython = python3
skip_install = true
deps = {[testenv:release-base]deps}
passenv =
    {[testenv:release-base]passenv}
commands =
    {[testenv:release-base]commands}
    twine upload --skip-existing --repository testpypi {toxinidir}/dist/*

[testenv:release]
basepython = python3
skip_install = true
deps = {[testenv:release-base]deps}
passenv =
    {[testenv:release-base]passenv}
commands =
    {[testenv:release-base]commands}
    twine upload --skip-existing --repository pypi {toxinidir}/dist/*
