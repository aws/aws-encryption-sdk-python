[tox]
envlist =
    # The performance tests only work for python 3.11 and 3.12
    py{311,312}-performance_tests-mpl
    bandit, readme
    # TODO: Activate doc8 after finalizing README.rst
    ; bandit, doc8, readme

# Additional test environments:
#
# linters :: Runs all linters over all source code.
# linters-tests :: Runs all linters over all tests.

# Autoformatter helper environments:
#
# autoformat : Apply all autoformatters
#
# black-check : Check for "black" issues
# blacken : Fix all "black" issues
#
# isort-seed : Generate a known_third_party list for isort.
#   NOTE: make the "known_third_party = " line in setup.cfg before running this
#   NOTE: currently it incorrectly identifies this library too; make sure you remove it
# isort-check : Check for isort issues
# isort : Fix isort issues

# Operational helper environments:
#
# build :: Builds source and wheel dist files.
# test-release :: Builds dist files and uploads to testpypi pypirc profile.
# release :: Builds dist files and uploads to pypi pypirc profile.

[testenv:base-command]
commands = pytest -s -v test/
deps = 
    click


[testenv]
passenv =
    # Pass through AWS credentials
    AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \
    # AWS Role access in CodeBuild is via the contaner URI
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI \
    # Pass through AWS profile name (useful for local testing)
    AWS_PROFILE
sitepackages = False
deps =
    -rrequirements.txt
    # Install the MPL requirements if the `-mpl` suffix is present
    mpl: -rrequirements_mpl.txt
    ..
commands = 
    # awses_local: {[testenv:base-command]commands}
    performance_tests: {[testenv:base-command]commands}

# mypy
[testenv:mypy-coverage]
commands =
    # Make mypy linecoverage report readable by coverage
    python -c \
        "t = open('.coverage', 'w');\
        c = open('build/coverage.json').read();\
        t.write('!coverage.py: This is a private format, don\'t read it directly!\n');\
        t.write(c);\
        t.close()"
    coverage report -m

[testenv:mypy-common]
basepython = python3
deps =
    coverage
    mypy>=0.600
    mypy_extensions
    typing>=3.6.2

[testenv:mypy-py3]
basepython = {[testenv:mypy-common]basepython}
deps = {[testenv:mypy-common]deps}
commands =
    python -m mypy \
        --linecoverage-report build \
        src/aws_encryption_sdk_performance_tests/ \
        {posargs}
    {[testenv:mypy-coverage]commands}

[testenv:blacken-src]
basepython = python3
deps = -r../dev_requirements/linter-requirements.txt
commands =
    black --line-length 120 \
        src/aws_encryption_sdk_performance_tests/ \
        setup.py \
        test/ \
        {posargs}


[testenv:blacken]
basepython = python3
deps =
    {[testenv:blacken-src]deps}
commands =
    {[testenv:blacken-src]commands}

[testenv:black-check]
basepython = python3
deps =
    {[testenv:blacken]deps}
commands =
    {[testenv:blacken-src]commands} --diff

[testenv:isort-seed]
basepython = python3
deps = -r../dev_requirements/linter-requirements.txt
commands = seed-isort-config

[testenv:isort]
basepython = python3
deps = -r../dev_requirements/linter-requirements.txt
commands = isort -rc \
    src \
    test \
    setup.py \
    {posargs}

[testenv:isort-check]
basepython = python3
deps = {[testenv:isort]deps}
commands = {[testenv:isort]commands} -c

[testenv:autoformat]
basepython = python3
deps =
    {[testenv:blacken]deps}
    {[testenv:isort]deps}
    ..
commands =
    {[testenv:blacken]commands}
    {[testenv:isort]commands}

[testenv:doc8]
basepython = python3
deps = -r../dev_requirements/linter-requirements.txt
commands = doc8 README.rst

[testenv:bandit]
basepython = python3
deps = -r../dev_requirements/linter-requirements.txt
commands = bandit -r src/aws_encryption_sdk_performance_tests/

[testenv:linters]
basepython = python3
deps =
    {[testenv:doc8]deps}
    {[testenv:bandit]deps}
commands =
    {[testenv:doc8]commands}
    {[testenv:bandit]commands}

# Release tooling
[testenv:park]
basepython = python3
skip_install = true
deps = -r../dev_requirements/release-requirements.txt
commands = python setup.py park

[testenv:build]
basepython = python3
skip_install = true
deps =
    -r../dev_requirements/release-requirements.txt
commands =
    python setup.py sdist bdist_wheel

[testenv:test-release]
basepython = python3
skip_install = true
deps =
    {[testenv:build]deps}
    twine
commands =
    {[testenv:build]commands}
    twine upload --skip-existing --repository testpypi dist/*

[testenv:release]
basepython = python3
skip_install = true
deps =
    {[testenv:build]deps}
    twine
commands =
    {[testenv:build]commands}
    twine upload --skip-existing --repository pypi dist/*
